// <auto-generated />
using System;
using EvaluationService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EvaluationService.Migrations
{
    [DbContext(typeof(EvaluationsDbContext))]
    partial class EvaluationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EvaluationService.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<float?>("RatingAnswer")
                        .HasColumnType("real");

                    b.Property<string>("RawAnswer")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", t =>
                        {
                            t.HasCheckConstraint("CK_Answer_Response", "NOT(\"RawAnswer\" IS NULL AND \"RatingAnswer\" IS NULL)");
                        });
                });

            modelBuilder.Entity("EvaluationService.Models.Evaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EvaluationId"));

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FiliereId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("RespondentUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("EvaluationId");

                    b.ToTable("Evaluations", t =>
                        {
                            t.HasCheckConstraint("CK_Evaluation_Score", "\"Score\" >= 1 AND \"Score\" <= 5");
                        });
                });

            modelBuilder.Entity("EvaluationService.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.Property<int?>("StandardQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EvaluationService.Models.Questionnaire", b =>
                {
                    b.Property<int>("QuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionnaireId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("FiliereId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("RespondentUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QuestionnaireId");

                    b.ToTable("Questionnaires", t =>
                        {
                            t.HasCheckConstraint("CK_Questionnaire_Type", "NOT(\"FiliereId\" IS NULL AND \"ModuleId\" IS NULL)");
                        });
                });

            modelBuilder.Entity("EvaluationService.Models.StandardQuestion", b =>
                {
                    b.Property<int>("StandardQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StandardQuestionId"));

                    b.Property<int>("StatName")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("StandardQuestionId");

                    b.ToTable("StandardQuestions");
                });

            modelBuilder.Entity("EvaluationService.Models.Answer", b =>
                {
                    b.HasOne("EvaluationService.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EvaluationService.Models.Question", b =>
                {
                    b.HasOne("EvaluationService.Models.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("EvaluationService.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("EvaluationService.Models.Questionnaire", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
